[
    {
        "id": "2c7dd05f1a747528",
        "type": "http in",
        "z": "2a438da12c90ec0b",
        "name": "",
        "url": "/newData",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 360,
        "y": 540,
        "wires": [
            [
                "1a3ca87582b2fc47"
            ]
        ]
    },
    {
        "id": "95fb9f3e6e6411e7",
        "type": "http response",
        "z": "2a438da12c90ec0b",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 760,
        "y": 540,
        "wires": []
    },
    {
        "id": "1a3ca87582b2fc47",
        "type": "function",
        "z": "2a438da12c90ec0b",
        "name": "function 8",
        "func": "//get current contents of global variable\n//variable name inside global.get() can be anything\n//provide a default option in case the global var doesn't exist yet\nlet data = global.get(\"sensorData\") || [];\n\n//add new datapoint to data\n//we'll go with a JSON object containing the contents of the request body\n//and another property containing the current timestamp\n//data.push({msg: Number(msg.req.body), timeSent: Date.now()});\n// Convert collision code to string\nlet collisionMsg;\nswitch(msg.payload) {\n    case 0:\n        collisionMsg = \"No collision\";\n        break;\n    case 1:\n        collisionMsg = \"Collision front\";\n        break;\n    case 2:\n        collisionMsg = \"Collision back\";\n        break;\n    case 3:\n        collisionMsg = \"Collision right\";\n        break;\n    case 4:\n        collisionMsg = \"Collision left\";\n        break;\n    default:\n        collisionMsg = \"Unknown collision\";\n}\n\n// Prepare data to send back\nmsg.payload = {\n    msg: collisionMsg,\n    timeSent: Date.now()\n};\n\n// Finally, update the contents of your global variable with the new data\ndata.push(msg.payload);\nglobal.set(\"sensorData\", data);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 540,
        "wires": [
            [
                "95fb9f3e6e6411e7",
                "0b23e92efa288db6"
            ]
        ]
    },
    {
        "id": "2ec40c3041345540",
        "type": "http in",
        "z": "2a438da12c90ec0b",
        "name": "",
        "url": "/newData",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 370,
        "y": 580,
        "wires": [
            [
                "c42fb9cd5b534ae5"
            ]
        ]
    },
    {
        "id": "c42fb9cd5b534ae5",
        "type": "function",
        "z": "2a438da12c90ec0b",
        "name": "function 9",
        "func": "//get global variable contents\nmsg.payload = global.get(\"sensorData\") || [];\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 580,
        "wires": [
            [
                "ff173740e4368b0c"
            ]
        ]
    },
    {
        "id": "ff173740e4368b0c",
        "type": "http response",
        "z": "2a438da12c90ec0b",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 760,
        "y": 580,
        "wires": []
    },
    {
        "id": "0b23e92efa288db6",
        "type": "debug",
        "z": "2a438da12c90ec0b",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 460,
        "wires": []
    }
]
